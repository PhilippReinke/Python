import base64
import binascii
import random

# conversion functions
def hexString_base64String(hexString):
	# Is the hex string ok?
	if hexString[0:2] == '0x':
		hexString = hexString[2:]
	if len(hexString) % 2 == 1:
		print('Error: hex string must be of even length.')
		return ''
	# perform conversion
	byteString = binascii.unhexlify(hexString)
	return str(base64.b64encode(byteString), 'utf-8')
def base64String_hexString(b64String):
	try:
		return str(binascii.hexlify(base64.b64decode(b64String)), 'utf-8')
	except:
		print('Error: Cannot convert base64 to hex string.')

def hexString_UnicodeString(hexString):
	# Is the hex string ok?
	if hexString[0:2] == '0x':
		hexString = hexString[2:]
	if len(hexString) % 2 == 1:
		print('Error: hex string must be of even length.')
		return ''
	# perform conversion
	return binascii.unhexlify(hexString).decode('utf-8')
def UnicodeString_hexString(string):
	return str(binascii.hexlify(string.encode('utf-8')), 'utf-8')

# key for RSA en- and decryption
class RSA_KEY:
	def __init__(self):
		pass

	def readRSA_DER(self, rsaBase64):
		""" 0 = everything fine. 1 = RSA key format is unknown. """
		try:
			# base64 string to hex string
			rsaHex = base64.b64decode(rsaBase64).hex()

			# Parse hex string. Note: '02' is the keyword for an integer value. It is followed by the 
			# length of the value and then the value itself.

			# calculate first occurence of '02' in private key
			if rsaHex[2] == '8':
				l = int(rsaHex[3], 16)
				pos = 4 + 2*l
			else:
				pos = 4

			rsaIntValues = []
			while 1:
				# in a public key we need to jump
				if rsaHex[pos:pos+2] == '03':
					pos = rsaHex.find('0030', pos) + 2
					if rsaHex[pos+2] == '8':
						l = int(rsaHex[3], 16)
						pos = pos + 4 + 2*l
					else:
						pos = pos + 4
					continue

				# extract all integers
				if rsaHex[pos+2] == '8':
					# determine length of the value
					numOctets = int(rsaHex[pos+3])
					length = int(rsaHex[pos+4:pos+4+2*numOctets], 16)

					# new pos at begining of value
					oldPos = pos
					pos = pos+4+2*numOctets

					# extract value for all integers
					if rsaHex[oldPos:oldPos+2] == '02':
						rsaIntValues.append(int(rsaHex[pos:pos+2*length], 16))

					# jump to next entry, i.e. position of next values '02'
					pos = pos+2*length
					if pos >= len(rsaHex):
						break
				else:
					length = int(rsaHex[pos+2:pos+4], 16)

					# extract value for all integers
					if rsaHex[pos:pos+2] == '02':
						rsaIntValues.append(int(rsaHex[pos+4:pos+4+2*length], 16))

					# jump to next entry, i.e. position of next values '02'
					pos = pos+4+2*length
					if pos >= len(rsaHex):
						break

			# It is a private key
			if len(rsaIntValues) == 9:
				description = ['n', 'e', 'd', 'p', 'q']
				self.key = dict(zip(description, rsaIntValues[1:6]))
			# It is a public key
			elif len(rsaIntValues) == 2:
				description = ['n', 'e']
				self.key = dict(zip(description, rsaIntValues[0:2]))
			else:
				print('Error: RSA key format is unknown. Here are the int-values of the key.')
				print(rsaIntValues)
				return 1

		# RSA key is flawed
		except:
			print('Error: The RSA key is flawed.')
			return 1
		return 0

	def getKey_Dictionary(self):
		return self.key

	# will be implemented later
	def readKeyFromFile(self, path):
		pass

	def generateKey(self):
		pass

	def getPublicKey_DER(self):
		pass

	def getPrivateKey_DER(self):
		pass

# RSA with PKCS#1 Scheme
class RSA:
	def __init__(self, key):
		self.key = key

	def encryptHexString(self, hexString):
		# Have we go the public key?
		try:
			n = self.key['n']
			e = self.key['e']
		except:
			print('Error: Public key is unknown.')
			return

		try:
			# determine length of key and data
			lengthPublicKey = len(hex(n)[2:])
			lengthData = len(hexString)
			# data is too long
			if lengthData > lengthPublicKey - 22:
				print('Error: hex string is too long for this public key.')
				return

			while 1:
				# non-zero randomly-generated bytes
				lengthPS  = lengthPublicKey - lengthData - 6
				PS = [random.choice(['1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']) for _ in range(lengthPS)]
				PS = ''.join(map(str, PS))
				# form encoded message block
				EB = '0002' + PS + '00' + hexString

				# hex string to integer
				m = int(EB, 16)
				# encrypt
				c = pow(m,e,n)

				# need even length for base64 encoding
				hexC = hex(c)[2:]
				if len(hexC) % 2 == 0:
					break

			return hexC
		except:
			print('Error: hex string is of odd length.')
			return

	def decryptHexString(self, hexString):
		# Have we go the private key?
		try:
			n = self.key['n']
			d = self.key['d']
		except:
			print('Error: Private key is unknown.')
			return

		try:
			# hexString to int
			c = int(hexString, 16)
			# decrypt and hex it
			m = hex(pow(c,d,n))
			# data starts after last occurence of '00' 
			# We assume text does not contain 0x00 in unicode!
			pos = m.rfind('00')
			data = m[pos+2:]

			return data
		except:
			print('Error: hex string has not been encrypted properly.')
			return

	def encrypt_Plaintext_Base64(self, string):
		""" '' = something went wrong. """
		try:
			hexString = UnicodeString_hexString(string)
			hexString = self.encryptHexString(hexString)
			return hexString_base64String(hexString)
		except:
			print('Error: Cannot encrypt plaintext.')
			return ''

	def decrypt_Base64_Plaintext(self, base64String):
		""" '' = something went wrong. """
		try:
			hexString = base64String_hexString(base64String)
			return hexString_UnicodeString(self.decryptHexString(hexString))
		except:
			print('Error: Cannot decrypt base64 string.')
			return ''

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Let us test it with https://travistidwell.com/jsencrypt/demo/

# some RSA key
rsa1Key_base64String = """MIIEpQIBAAKCAQEAzWY3FSyRc02tddLFlbEzxfzGl8lojAWHxNtcXuOz5Tr7GvjL
SxBip9Q/No2P1QpuYLPVLaD0WNf3oOPYr7srGgM/IPGJwytGL3fhd6cbGPR7Qbn6
Q6x14Ez2yhfROSWy5QLddYTjLk9mMnZtbJbdKAMsx3yRlWjfKTHuonPKn+av9MMP
UVkAUaKmyhVLlwki7yAub2lTZCY1rykAqwGkGgS6AT4V2lcleyIeu4lczy/W/c+L
yWA+l6vXFUYZ6qxrrc/bMSZQXaj/i1mY5YLSRPVBfnMBrtm6Y14nx6XVdAtj0uPh
baZeY9fjE7c2Ik492rsSGKVD7HMJAyDu3WDpAwIDAQABAoIBAAnBpjIqSMpqUSf8
mAgRP71S0XgaSA4GoTlXlh6nwD7OO2k/kiCBqb4BFfOYa9GZyj5rrF+bep/RumB5
EizeviBhMRl2f622m4HbtukBFgdsbYJkvB+EzKCX500YLocBZGr+ZNiVNFlZyifx
eicjT2P8Kp9bKmsnbRo+1e//ggtwStcS9peW9xDLUBV//i1fixJa/FFlOPuQ4GE1
zxa+xaYGWYq1HA9AUl5pRdT872vmRwjRpQ9JPRaLmbKBpQ0ZqoJ5SOk5xFT00tZP
THiPbrZOau0UefQQKuju+xCgWdBj++IlnBzSM5dVzWTBt9wzDp2LO8n6YkAUUnDb
sDZZqbECgYEA/9VHRuPBXm4S29X/HPD9EXOf9fF2EEEn9syin/FLYslqAiB/8i+J
NKDdAsAnEPgbIs12LMUvay9RZZGazWdks4+v7qAmELc5qPKF412zoMDpfAkTk2TF
mUbBh2PTaNOT8XeXPW4mBManiRBmJHoaZ2DZqvtKw8sWaBtRQba5THkCgYEAzYiD
yYivLh7noXCV1rVdsRxEYT/mZwJGXvMe+5yxsyVZNkUETjxUl5EHAFRMzI2BLaSo
Kbu3aj7unML2aqHQGST3mM7zdMwWDBSUpvyChvrywKXb2c81WtU9etcqIjmGJPZF
9Us29jqjVuycQ5S4K595gvmmI36nAlcQzSM2ClsCgYEA2CEQVD05MVOAryP8oDCf
O00ZSCezfEvvPTrn8INjEpPh8OYP8URjf4ie7iHzXwybsC0vtubnBoA1Hb+CriC5
HFE5ajj1r417MtWgctLIW/hdyCHK3ex2WuVBveWBxr9n7sj/hjA2AjbpdovaHtrg
z5Eskpw1L2+1AEKDxSZfKNECgYEAw0THsFkj1fWWq1KDiRGWigYJETvcclE++kaR
UQt16HW7ZEv94zZ+R+GJfU6aCF0INY0SF1Q41cAkgtrXskc5pinw8kTsGDMtXxzO
fje46vTQXSc20KCEWF/voR168jkksUko/fsPpK/hL1xsueg5cXh5wW3d4isaEKcX
V030sbECgYEAvgJFMcXWhTcZbukXFD6jouwrlRaxVzpq7LJoQ+9njeB6McIJFFWE
eH6rArE4JxViJIr3a8h/sQ8+IeOig5RD3vMZBJx3Kmn81vnc024zLyJuQvxGJZmQ
j/cQa3UmTJfpMVOIMT3hessefTCzok0ekAWwph1iEeG453zbONILuSs="""

# read key
rsa_key = RSA_KEY()
if rsa_key.readRSA_DER(rsa1Key_base64String):
	quit()

# create class that performs en- and decryption
rsa = RSA(rsa_key.getKey_Dictionary())

# en- and decrypt message
plaintext = 'Hello world.'
textEncrypted = rsa.encrypt_Plaintext_Base64(plaintext)
textDecrypted = rsa.decrypt_Base64_Plaintext(textEncrypted)
print(textDecrypted + '\n')

# decrypt data from webpage
dataEncrypted = 'D0yjqdkw9UOVBfzR6BIEG/vN0m3Zgn3uvQlk3lhxa8haobVpcByADE/kwd9PlN2EAkx8cikJcSN3kTFEUZhrFC3VyxFUOki0btKimCGQWwCH0jqDHrmTBJvhlVxWEsX/aDgUE3As+VfPKsCa28Grk+WnJobk7GE+/kJ5uCx1vqt7Zzz0G9mJXtBrhHRbGfDwybxh0WeS3I3PjhB1whAIdlaKaiuMDDuGqVowJVPgB1abo5OrYDTqciwkICGp3SGk1YAW1mftfPaRTjK7BUprRt20mmd/se1FRfCHUzpyQ468DiCG+JIVzger1bzQem1s9FuRjpw85KkZDZx1yrzyCA=='
dataDecrypted = rsa.decrypt_Base64_Plaintext(dataEncrypted)
print(dataDecrypted + '\n')

# encrypt data 
dataEncrypted = rsa.encrypt_Plaintext_Base64('Public Key')
print(dataEncrypted)